(defsrc
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc ins  del
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft      up
  lctl      lmet lalt           spc            ralt rmet rctl left down right
)
(deflayer base
 grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc @pra lrld
 tab  @lq  w    e    r    t    y    u    i    o    p    [    ]    \
 @cex @ma  @ms  @md  @mf  g    h    @mj  @mk  @ml  @mo  '         ret
 rsft @lz  @lx  @lc  @lv  b    n    @lm  @l,  @l.  @l/  rsft      up
 lctl      lmet lalt           spc            @mov rmet rctl left down right
)
(deflayer fast
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc ins  lrld
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  @cex a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft      up
  lctl      lmet lalt           spc            @mov rmet rctl left down right
)
(deflayer practice
  XX   XX   XX   XX   XX    XX  XX   XX   XX   XX   XX   XX   XX   XX  @bas lrld
  tab  q    w    e    r    t    y    u    i    o    p    XX   XX   XX
  @cex @ma  @ms  @md  @mf  g    h    @mj  @mk  @ml  @mo  '         ret
  XX   @lz  @lx  @lc  @lv  b    n    @lm  @l,  @l.  @l/  XX        XX
  XX        XX   XX          spc               @mov XX   XX   XX   XX   XX
)
(deflayer navigationL
  _    _    _    _    _    _   _    _    _    _    _    _    _    _    _    lrld
  _    tab  XX   XX   XX   _   _    home pgup pgdn end  _    _    _
  _    @bwd bspc del  @dwd XX  XX   @nv7 @nv8 @nv9 @nv0 _         _
  _    @und @cut @cpy @pst XX  XX   @mlw @mu4 @md4 @mrw _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer navigationR
  _    _    _    _    _    _   _    _    _    _    _    _    _    _    _    lrld
  _    tab  XX   XX   XX   _   _    home pgup pgdn end  _    _    _
  _    @nv1 @nv2 @nv3 @nv4 XX  XX   left up   down rght ins       _
  _    @und @cut @cpy @pst XX  XX   @mlw @mu4 @md4 @mrw _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer navigation
  _    _    _    _    _    _   _    _    _    _    _    _    _    _    _    lrld
  _    tab  XX   XX   XX   _   _    home pgup pgdn end  _    _    _
  _    @bwd bspc del  @dwd XX  XX   left up   down rght ins       _
  _    @und @cut @cpy @pst XX  XX   @mlw @mu4 @md4 @mrw _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer symbolsL
  _    _    _    _    _    _    _    _    _    _    _    _    _    _    _    lrld
  _    `    S-`  @eml XX   XX   XX   {    }    +    =    _    _    _
  XX   S-1  S-2  S-3  S-4  S-\  \    lmet lalt lctl lsft XX        _
  _    S-5  S-6  S-7  S-8  XX   XX   S-9  S-0  <    S-.  _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer symbolsR
  _    _    _    _    _    _    _    _    _    _    _    _    _    _    _    lrld
  _    `    S-q  @eml XX   XX   XX   {    }    +    =    _    _    _
  XX   lmet lalt lctl lsft S-\  \    [    ]    S--   -    XX        _
  _    S-5  S-6  S-7  S-8  XX   XX   S-9  S-0  <    S-.  _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer numbersL
  _    _    _    _    _    _    _    _    _    _    _    _    _    _    _    lrld
  _    _    _    S-9  S-0  XX   /    7    8    9    -    _    _    _
  _    _    _    _    _    XX   S-8  lmet lalt lctl lsft _         _
  _    {    }    [    ]    XX   0    1    2    3    .    _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer numbersR
  _    _    _    _    _    _    _    _    _    _    _    _    _    _    _    lrld
  _    _    _    S-9  S-0  XX   /    7    8    9    -    _    _    _
  _    lmet lalt lctl lsft XX   S-8  4    5    6    +    _         _
  _    {    }    [    ]    XX   0    1    2    3    .    _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer mediaL
  _    _    _    _    _    _    _    _    _    _    _    _    _    _    _    lrld
  _    F9   F10  F11  F12  _    _    blup bldn _    _    _    _    _
  _    F1   F2   F3   F4   XX   XX   lmet lalt lctl lsft _         _
  _    F5   F6   F7   F8   XX   XX   prev pp   next mute _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer mediaR
  _    _    _    _    _    _    _    _    _    _    _    _    _    _    _    lrld
  _    F9   F10  F11  F12  _    _    blup bldn _    _    _    _    _
  _    F1   F2   F3   F4   XX   XX   volu vold brup brdn _         _
  _    F5   F6   F7   F8   XX   XX   prev pp   next mute _         _
  _         _    _              _              _    _    _    _    _    _
)
(deflayer mouse
  _    _    _    _    _    _    _    _    _    _    _    _    _    _    _    lrld
  _    _    mlft mmid mrgt _    _    @mwl @mwu @mwd @mwr _    _    _
  _    _    _    mbck mfwd _    _    @mal @mau @mad @mar _         _
  _    _    _    _    _    _    _    @mml @mmu @mmd @mmr _         _
  _         _    _              _              _    _    _    _    _    _
)
(defcfg
  linux-dev "/dev/input/by-path/pci-0000\:00\:14.0-usb-0\:8\:1.1-event-kbd"
  process-unmapped-keys yes
  danger-enable-cmd yes
  sequence-timeout 1000
  delegate-to-first-layer yes
  movemouse-inherit-accel-state yes
  movemouse-smooth-diagonals yes
  concurrent-tap-hold no
  chords-v2-min-idle-experimental 200
)
(deffakekeys
  to-base (layer-switch base)
)
(defalias
    tp (multi (layer-switch fast) (on-idle-fakekey to-base tap 25))
    und (arbitrary-code 131)
    cpy (arbitrary-code 133)
    pst (arbitrary-code 135)
    cut (arbitrary-code 137)
    mov (layer-while-held navigation)
    mlw A-left
    mu4 (macro up up up up)
    md4 (macro down down down down)
    mrw A-rght
    bwd C-bspc
    dwd C-del
    eml (macro w l u u d h k e e u k s S-2 t m a l u . c ; m)
    pra (layer-switch practice)
    bas (layer-switch base)

    lz  (multi f24 (tap-hold-release 200 200 (multi z @tp) (layer-while-held navigationR)))
    lx  (multi f24 (tap-hold-release 200 200 (multi x @tp) (layer-while-held mediaR)))
    lc  (multi f24 (tap-hold-release 200 200 (multi c @tp) (layer-while-held numbersR)))
    lv  (multi f24 (tap-hold-release 200 200 (multi v @tp) (layer-while-held symbolsR)))
    lm  (multi f24 (tap-hold-release 200 200 (multi m @tp) (layer-while-held symbolsL)))
    l,  (multi f24 (tap-hold-release 200 200 (multi , @tp) (layer-while-held numbersL)))
    l.  (multi f24 (tap-hold-release 200 200 (multi . @tp) (layer-while-held mediaL)))
    l/  (multi f24 (tap-hold-release 200 200 (multi / @tp) (layer-while-held navigationL)))
    lq  (multi f24 (tap-hold-release 200 200 (multi q @tp) (layer-while-held mouse)))
    ma  (multi f24 (tap-hold-release 200 200 (multi a @tp) lmet))
    ms  (multi f24 (tap-hold-release 200 200 (multi s @tp) lalt))
    md  (multi f24 (tap-hold-release 200 200 (multi d @tp) lctl))
    mf  (multi f24 (tap-hold-release 200 200 (multi f @tp) lsft))
    mj  (multi f24 (tap-hold-release 200 200 (multi j @tp) rsft))
    mk  (multi f24 (tap-hold-release 200 200 (multi k @tp) rctl))
    ml  (multi f24 (tap-hold-release 200 200 (multi l @tp) lalt))
    mo  (multi f24 (tap-hold-release 200 200 (multi ; @tp) rmet))
    cex (multi f24 (tap-hold-release 200 200 esc lctl))
    nv1 (multi f24 (tap-hold-release 200 200 @bwd lmet))
    nv2 (multi f24 (tap-hold-release 200 200 bspc lalt))
    nv3 (multi f24 (tap-hold-release 200 200 del  lctl))
    nv4 (multi f24 (tap-hold-release 200 200 @dwd lsft))
    nv7 (multi f24 (tap-hold-release 200 200 left rsft))
    nv8 (multi f24 (tap-hold-release 200 200 up rctl))
    nv9 (multi f24 (tap-hold-release 200 200 down ralt))
    nv0 (multi f24 (tap-hold-release 200 200 right rmet))

    mmu (movemouse-up 8 2)
    mmd (movemouse-down 8 2)
    mml (movemouse-left 8 2)
    mmr (movemouse-right 8 2 )
    mau (movemouse-accel-up 8 500 2 17)
    mad (movemouse-accel-down 8 500 2 17)
    mal (movemouse-accel-left 8 500 2 17)
    mar (movemouse-accel-right 8 500 2 17)
    mwu (mwheel-up 1 1)
    mwd (mwheel-down 1 1)
    mwl (mwheel-left 1 1)
    mwr (mwheel-right 1 1)
)


#| --------------------------------------------------------------------------

arsnnniat
for is the bar walrus


                  Optional: press-only / release-only buttons

  - `(press-only x)` : Send the *press* of x when this button is tapped
  - `(release-only x)` : Send the *release* of x when this button is tapped

(defalias

  ;; Something useful
  cpy C-c
  pst C-v
  cut C-x

  ;; Something silly
  md1 (around a (around b c))    ;; abc
  md2 (around a (around-only lsft b)) ;; aB
  md3 C-A-M-S-l
  md4 (around % b)               ;; BEWARE: %B, not %b, do you see why?
  md5 (around-when-alone lctl c)
)

;; Let's make both shift keys sticky
(defalias
  sl (sticky-key 300 lsft)
  sr (sticky-key 300 rsft))

(defalias
  ctl-lck (stepped (press-only lctl) (release-only lctl)))

(defalias tst (around (layer-toggle macro-test)
                (around (layer-toggle layer-test)
                  (around (layer-toggle around-next-test)
                    (around (layer-toggle command-test)
                            (layer-toggle modded-test))))))

(deflayer modded-test
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    @md4 _    _    _    _    _    _    _    _    _    _    _
  _    _    @md1 @md2 @md3 _    _    _    _    _    _    _    _
  _    _    @cut @cpy @pst _    _    _    _    _    _    _
  _    _    _              _              _    _    _    _
)

(defalias
  mc1 #(K M o n a d)
  mc2 #(C-c P50 A-tab P50 C-v) ;; Careful, this might do something
  mc3 #(P200 h P150 4 P100 > < P50 > < P20 0 r z 1 ! 1 ! !)
  mc4 (tap-macro a (pause 50) @md2 (pause 50) c)
  mc5 (tap-macro-release esc esc esc)
  mc6 #(@mc3 spc @mc3 spc @mc3)
)

(deflayer macro-test
  _    @mc1 @mc2 @mc3 @mc4 @mc5 @mc6 _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _              _              _    _    _    _
)
makes
(defalias

  yah (layer-toggle asking-for-trouble) ;; Completely safe
  nah (layer-add asking-for-trouble)    ;; Completely unsafe

  ld1 (layer-delay 500 numbers) ;; One way to get a leader-key
  ld2 (layer-next numbers)      ;; Another way to get a leader key

  ;; NOTE, this is safe because both `qwerty` and `colemak` contain the `@tst`
  ;; button which will get us to the `layer-test` layer, which itself contains
  ;; both `@qwe` and `@col`.
  qwe (layer-switch qwerty) ;; Set qwerty as the base layer
  col (layer-switch colemak) ;; Set colemak as the base layer
)
(deflayer layer-test
  @qwe _    _    _    _    _    _    _    _    _    _    @add _    @nah
  @col _    _    _    _    _    _    _    _    _    _    _    _    @yah
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    @ld1 @ld2 _
  _    _    _              _              _    _    _    _
)

;; Exactly like qwerty, but with the letters switched around
(deflayer colemak
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    f    p    g    j    l    u    y    ;    [    ]    \
  @xcp a    r    s    t    d    h    n    e    i    o    '    ret
  @sl  z    x    c    v    b    k    m    ,    .    /    @sr
  lctl @num lalt           spc            ralt rmet @sym @tst
)

(defalias lol #(: - D))

;; Contrived example
(deflayer asking-for-trouble
  @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol
  @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol
  @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol
  @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol
  @lol @lol @lol           @lol           @lol @lol @lol @lol
)

;; One way to safely use layer-add and layer-rem: the button bound to layer-add
;; is the same button bound to layer-rem in the layer that `add` adds to the
;; stack. I.e., it becomes impossible to add or remove multiple copies of a
;; layer.
(defalias
  add (layer-add multi-overlay) ;; multi-overlay is defined in the next
  rem (layer-rem multi-overlay) ;; section below this
)

(defalias
  xtn (tap-next x lsft)         ;; Shift that does 'x' on tap
  xth (tap-hold 400 x lsft)     ;; Long delay for easier testing
  thn (tap-hold-next 400 x lsft)
  tnr (tap-next-release x lsft)
  tnp (tap-next-press x lsft)
  tnh (tap-hold-next-release 2000 x lsft)

  ;; Used it the colemak layer
  xcp (tap-hold-next 400 esc ctl)
)

;; Some of the buttons used here are defined in the next section
(deflayer multi-overlay
  @mt  _    _    _    _    _    _    _    _    _    _    _    @rem _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  @thn _    _    _    _    _    _    _    _    _    _    _    _
  @xtn _    _    _    _    _    _    _    _    _    _    @xth
  @tnr @tnp _              _              _    _    _    @tnh
)

(defalias
  mt  (multi-tap 300 a 300 b 300 c 300 d e))

(defalias
  ns  (around-next sft)        ;; Shift until the release of the next press
  ns' (around-next-single sft) ;; Shift the next event
  nnm (around-next @num)       ;; Perform next press in numbers layer
  ntm (around-next-timeout 500 sft XX)
  inn (before-after-next tab S-tab)


)

(deflayer around-next-test
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  @ns  _    _    _    _    _    _    _    _    _    _    _    _
  @nnm _    _    _    _    _    _    _    _    _    _    _
  @ntm _    _              _              _    _    _    _
)

(defalias
  sym (layer-toggle symbols)

)
(deflayer symbols
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    ä    é    ©    _    _    _    _    _    _    _    _    _    _
  _    +'   +~   +`   +^   _    _    _    _    _    _    _    _
  _    +"   +,   _    _    _    _    _    _    _    _    _
  _    _    _              _              _    _    _    _
)


(defalias
  dat (cmd-button "date >> /tmp/kmonad_example.txt")   ;; Append date to tmpfile
  pth (cmd-button "echo $PATH > /tmp/kmonad_path.txt") ;; Write out PATH
  ;; `dat' on press and `pth' on release
  bth (cmd-button "date >> /tmp/kmonad_example.txt"
                  "echo $PATH > /tmp/kmonad_path.txt")
)
(deflayer command-test
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    @dat @pth _
  _    _    _              _              _    _    _    _
)

|#
