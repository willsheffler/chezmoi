[

    // { "keys": ["shift+up"], "command": "select_lines", "args": {"forward": false} },
    // { "keys": ["shift+down"], "command": "select_lines", "args": {"forward": true} },

    { "keys": ["alt+ctrl+k"], "command": "new_file" },
    { "keys": ["super+alt+f"],"command": "open_file", "args": {"file": "${project}"} },
    { "keys": ["ctrl+y"], "command": "paste_and_indent" },
    { "keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line.sublime-macro"}, "context":
        [{ "key": "overlay_has_focus", "operator": "equal", "operand": false }]
    },
    { "keys": ["ctrl+alt+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line Before.sublime-macro"} },

    { "keys": ["ctrl+b"], "command": "cancel_build" },
    { "keys": ["leftalt+ctrl+t", "leftalt+ctrl+i"], "command": "goto_symbol_in_project" },
    { "keys": ["ctrl+leftalt+t", "leftalt+ctrl+o"], "command": "show_overlay", "args": {"overlay": "goto", "show_files":true} },

    // { "keys": ["leftalt+ctrl+e"], "command": "move", "args": {"by": "pages", "forward": false} },
    // { "keys": ["leftalt+ctrl+i"], "command": "move", "args": {"by": "pages", "forward": true} },
    { "keys": ["leftalt+ctrl+e"], "command": "scroll_lines", "args": {"amount": 20.0 } },
    { "keys": ["leftalt+ctrl+i"], "command": "scroll_lines", "args": {"amount": -20.0 } },
    { "keys": ["leftalt+ctrl+n"], "command": "move_to", "args": {"to": "hardbol", "extend": false }},
    { "keys": ["leftalt+ctrl+o"], "command": "move_to", "args": {"to": "hardeol", "extend": false }},
    { "keys": ["leftalt+ctrl+shift+n"], "command": "move_to", "args": {"to": "bol", "extend": true }},
    { "keys": ["leftalt+ctrl+shift+o"], "command": "move_to", "args": {"to": "eol", "extend": true }},

     {
       "keys": ["leftalt+ctrl+a"], "command": "align_tab",
       "args" : {"live_preview" : true}
     },
    // tree_sitter_install_language
    // tree_sitter_remove_language
    // tree_sitter_select_ancestor
    // tree_sitter_select_sibling
    // tree_sitter_select_cousins
    // tree_sitter_select_descendant
    // tree_sitter_select_symbols
    // tree_sitter_goto_symbol
    // tree_sitter_print_tree
    // tree_sitter_show_node_under_selection
    { "keys": ["leftalt+ctrl+d"], "command": "tree_sitter_select_ancestor" },
    { "keys": ["leftalt+ctrl+shift+d"], "command": "tree_sitter_select_descendant" },

    // a few mac holdovers for comfort
    { "keys": ["leftalt+w"], "command": "close_file" },
    { "keys": ["leftalt+a"], "command": "select_all" },
    { "keys": ["leftalt+e"], "command": "expand_selection", "args": {"to": "word"} },
    { "keys": ["leftalt+g"], "command": "find_under" },



    // { "keys": ["leftalt+n"], "command": "build" },

    { "keys": ["ctrl+leftalt+z"], "command": "redo" },
    { "keys": ["leftalt+shift+z"], "command": "redo" },
    { "keys": ["leftalt+k"], "command": "toggle_side_bar" },
    { "keys": ["leftalt+shift+d"], "command": "find_under_expand_skip" },
    // { "keys": ["leftalt+/"], "command": "toggle_comment" },
    { "keys": ["ctrl+x"], "command": "cut" },
    { "keys": ["ctrl+c"], "command": "copy" },
    { "keys": ["ctrl+y"], "command": "paste" },
    // { "keys": ["ctrl+v"], "command": "move", "args": {"by": "pages", "forward": true} },


//  { "keys": ["leftalt+q"], "command": "exit" },
    { "keys": ["leftalt+s"], "command": "save" },
    { "keys": ["leftalt+shift+s"], "command": "save_as" },
    { "keys": ["ctrl+s"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse": false} },
    { "keys": ["ctrl+leftalt+s"], "command": "show_panel", "args": {"panel": "find_in_files"} },

    { "keys": ["ctrl+tab"], "command": "noop" },
    { "keys": ["ctrl+shift+tab"], "command": "noop" },
    { "keys": ["ctrl+leftalt+tab"], "command": "next_view_in_stack" },
    { "keys": ["ctrl+leftalt+shift+tab"], "command": "prev_view_in_stack" },



    // { "keys": ["leftalt+enter"], "command": "toggle_full_screen" },
    { "keys": ["leftalt+shift+enter"], "command": "toggle_distraction_free" },


    { "keys": ["ctrl+d"], "command": "right_delete"},


    //UP DOWN LEFT RIGHT
    { "keys": ["ctrl+n"], "command": "move", "args": {"by": "characters", "forward": false} },
    { "keys": ["ctrl+o"], "command": "move", "args": {"by": "characters", "forward": true} },
    { "keys": ["ctrl+e"], "command": "move", "args": {"by": "lines", "forward": false} },2,
    { "keys": ["ctrl+i"], "command": "move", "args": {"by": "lines", "forward": true} },
    { "keys": ["leftalt+e"], "command": "select_lines", "args": {"forward": false} },
    { "keys": ["leftalt+i"], "command": "select_lines", "args": {"forward": true} },
    { "keys": ["leftalt+shift+e"], "command": "swap_line_up" },
    { "keys": ["leftalt+shift+i"], "command": "swap_line_down" },
    { "keys": ["ctrl+shift+n"], "command": "move", "args": {"by": "characters", "forward": false, "extend": true} },
    { "keys": ["ctrl+shift+o"], "command": "move", "args": {"by": "characters", "forward": true, "extend": true} },
    { "keys": ["ctrl+shift+e"], "command": "move", "args": {"by": "lines", "forward": false, "extend": true} },
    { "keys": ["ctrl+shift+i"], "command": "move", "args": {"by": "lines", "forward": true, "extend": true} },
    // { "keys": ["ctrl+leftalt+e"], "command": "move", "args": {"by": "pages", "forward": false} },
    // { "keys": ["ctrl+leftalt+i"], "command": "move", "args": {"by": "pages", "forward": true} },

    // { "keys": ["ctrl+leftalt+a"], "command": "prev_view" },
    // { "keys": ["ctrl+leftalt+e"], "command": "next_view" },

    { "keys": ["leftalt+x"],       "command": "show_overlay", "args": {"overlay": "command_palette"} },


    { "keys": ["leftalt+d"], "command": "find_under_expand" },



    // // auto-file-name
    // { "keys": ["leftalt+super+o"], "command": "afn_show_filenames",
    //    "context":
    //  [
    //      { "key": "afn_use_keybinding", "operator": "equal", "operand": true }
    //  ]
    // },

    // ORIGAMI
    { "keys": ["alt+backspace"], "command": "destroy_pane", "args": {"direction": "self"} },
    { "keys": ["ctrl+up"], "command": "travel_to_pane", "args": {"direction": "up"} },
    { "keys": ["ctrl+right"], "command": "travel_to_pane", "args": {"direction": "right"} },
    { "keys": ["ctrl+down"], "command": "travel_to_pane", "args": {"direction": "down"} },
    { "keys": ["ctrl+left"], "command": "travel_to_pane", "args": {"direction": "left"} },

    { "keys": ["shift+pgup"], "command": "carry_file_to_pane", "args": {"direction": "up"} },
    { "keys": ["shift+home"], "command": "carry_file_to_pane", "args": {"direction": "right"} },
    { "keys": ["shift+pgdn"], "command": "carry_file_to_pane", "args": {"direction": "down"} },
    { "keys": ["shift+end"], "command": "carry_file_to_pane", "args": {"direction": "left"} },

    // { "keys": ["ctrl+space", "leftalt+ctrl+e"], "command": "clone_file_to_pane", "args": {"direction": "up"} },
    // { "keys": ["ctrl+space", "leftalt+ctrl+o"], "command": "clone_file_to_pane", "args": {"direction": "right"} },
    // { "keys": ["ctrl+space", "leftalt+ctrl+i"], "command": "clone_file_to_pane", "args": {"direction": "down"} },
    // { "keys": ["ctrl+space", "leftalt+ctrl+n"], "command": "clone_file_to_pane", "args": {"direction": "left"} },
    // You can also create the pane automatically with the following command (insert empty parameters):
    // { "keys": [], "command": "create_pane_with_cloned_file", "args": {"direction": ""} }
    // { "keys": ["alt+ctrl+up"], "command": "create_pane", "args": {"direction": "up"} },
    // { "keys": ["alt+ctrl+right"], "command": "create_pane", "args": {"direction": "right"} },
    // { "keys": ["alt+ctrl+down"], "command": "create_pane", "args": {"direction": "down"} },
    // { "keys": ["alt+ctrl+left"], "command": "create_pane", "args": {"direction": "left"} },
    // You can also add  "give_focus": true to automatically focus on the new pane as follows:
    // { "keys": [], "command": "create_pane", "args": {"direction": "", "give_focus": true} }
    // { "keys": ["shift+alt+up"], "command": "destroy_pane", "args": {"direction": "up"} },
    // { "keys": ["shift+alt+right"], "command": "destroy_pane", "args": {"direction": "right"} },
    // { "keys": ["shift+alt+down"], "command": "destroy_pane", "args": {"direction": "down"} },
    // { "keys": ["shift+alt+left"], "command": "destroy_pane", "args": {"direction": "left"} },
    // You can also destroy the current pane by binding the following command:

    // { "keys": ["ctrl+space", "ctrl+leftalt+ctrl+e"], "command": "create_pane_with_file", "args": {"direction": "up"} },
    // { "keys": ["ctrl+space", "ctrl+leftalt+ctrl+o"], "command": "create_pane_with_file", "args": {"direction": "right"} },
    // { "keys": ["ctrl+space", "ctrl+leftalt+ctrl+i"], "command": "create_pane_with_file", "args": {"direction": "down"} },
    // { "keys": ["ctrl+space", "ctrl+leftalt+ctrl+n"], "command": "create_pane_with_file", "args": {"direction": "left"} },

    // You can pull a file from another pane by binding the following command:
    // { "keys": [], "command": "pull_file_from_pane", "args": { "direction": ""} }

    { "keys": ["leftalt+v"], "command": "toggle_zoom_pane", "args": {"fraction": 0.7} },

    { "keys": ["ctrl+space", "ctrl+enter"], "command": "zoom_pane", "args": {"fraction": 0.4} },
    { "keys": ["ctrl+space", "ctrl+z"], "command": "set_layout", "args": {
            "cells": [[2,0,3,3], [0,0,1,1],[0,2,2,3],[1,0,2,2],[0,1,1,2]],
            "cols":[0.0,0.333333333333,0.666666666667,1.0],
            "rows":[0.0,0.674724842767,0.863600628931,1.0]                     }  },
    { "keys": ["ctrl+space", "ctrl+c"], "command": "resize_pane", "args": {"orientation": "cols"} },
    { "keys": ["ctrl+space", "ctrl+r"], "command": "resize_pane", "args": {"orientation": "rows"} },


    { "keys": ["ctrl+'"], "command": "pytest_toggle_panel" },

    { "keys": ["ctrl+k"], "command": "move_to", "args": {"to": "hardeol", "extend": true }},
    { "keys": ["ctrl+k"], "command": "chain", "args": { "commands":
[ ["move_to",{"to":"hardeol","extend":true}], ["cut"] ] } },
    // { "keys": ["ctrl+k"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to Hard EOL.sublime-macro"} },


    // all default ctrl
    { "keys": ["ctrl+space", "ctrl+v"], "command": "paste_from_history" },
    { "keys": ["ctrl+space", "ctrl+d"], "command": "find_under_expand_skip" },
    { "keys": ["ctrl+space", "ctrl+up"], "command": "new_pane" },
    { "keys": ["ctrl+space", "ctrl+shift+up"], "command": "new_pane", "args": {"move": false} },
    { "keys": ["ctrl+space", "ctrl+down"], "command": "close_pane" },
    { "keys": ["ctrl+space", "ctrl+left"], "command": "focus_neighboring_group", "args": {"forward": false} },
    { "keys": ["ctrl+space", "ctrl+right"], "command": "focus_neighboring_group" },
    { "keys": ["ctrl+space", "ctrl+shift+left"], "command": "move_to_neighboring_group", "args": {"forward": false} },
    { "keys": ["ctrl+space", "ctrl+shift+right"], "command": "move_to_neighboring_group" },
    { "keys": ["ctrl+space", "ctrl+u"], "command": "upper_case" },
    { "keys": ["ctrl+space", "ctrl+l"], "command": "lower_case" },
    { "keys": ["ctrl+space", "ctrl+space"], "command": "set_mark" },
    { "keys": ["ctrl+space", "ctrl+a"], "command": "select_to_mark" },
    { "keys": ["ctrl+space", "ctrl+w"], "command": "delete_to_mark" },
    { "keys": ["ctrl+space", "ctrl+x"], "command": "swap_with_mark" },
    { "keys": ["ctrl+space", "ctrl+y"], "command": "yank" },
    { "keys": ["ctrl+space", "ctrl+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to Hard BOL.sublime-macro"} },
    { "keys": ["ctrl+space", "ctrl+g"], "command": "clear_bookmarks", "args": {"name": "mark"} },
    { "keys": ["ctrl+l"], "command": "show_at_center" },
















    //////////////////
    // emacs catchall for ctrl+g also handles preferred "single selection" behavior
    {"keys": ["ctrl+g"], "command": "sbp_quit", "args": {"favor_side": "start"},
"context": [
{"key": "sbp_catchall"},
// inverse of all the "escape" key things found in Default plugin and elsewhere
{ "key": "has_next_field", "operator": "equal", "operand": false },
{ "key": "has_prev_field", "operator": "equal", "operand": false },
{ "key": "panel_visible", "operator": "equal", "operand": false },
{ "key": "overlay_visible", "operator": "equal", "operand": false },
{ "key": "auto_complete_visible", "operator": "equal", "operand": false }
        ]
    },
    {"keys": ["ctrl+g"], "command": "clear_fields",
        "context": [{ "key": "has_next_field", "operator": "equal", "operand": true }]
    },
    {"keys": ["ctrl+g"], "command": "clear_fields",
        "context": [{ "key": "has_prev_field", "operator": "equal", "operand": true }]
    },
    {"keys": ["ctrl+g"], "command": "hide_panel", "args": {"cancel": true},
       "context": [{ "key": "panel_visible", "operator": "equal", "operand": true }]
    },
    {"keys": ["ctrl+g"], "command": "hide_overlay",
        "context": [{ "key": "overlay_visible", "operator": "equal", "operand": true }]
    },
    {"keys": ["ctrl+g"], "command": "hide_popup",
        "context": [{ "key": "popup_visible", "operator": "equal", "operand": true }]
    },
    {"keys": ["ctrl+g"], "command": "hide_auto_complete",
        "context": [{ "key": "auto_complete_visible", "operator": "equal", "operand": true }]
    },

    // prevent default ctrl+g goto line command from running
    {"keys": ["ctrl+g"], "command": "cancel",
        "context": [{"key": "overlay_visible", "operator": "equal", "operand": true }]
    },

    // cancel isearch
    { "keys": ["ctrl+g"], "command": "sbp_inc_search", "args": {"cmd": "quit"},
        "context": [ {"key": "i_search_active"}, {"key": "panel_has_focus"} ]
    },

    { "keys": ["ctrl+g"], "command": "single_selection", "context":
        [
{ "key": "num_selections", "operator": "not_equal", "operand": 1 }
        ]
    },
    { "keys": ["ctrl+g"], "command": "clear_fields", "context":
        [
{ "key": "has_next_field", "operator": "equal", "operand": true }
        ]
    },
    { "keys": ["ctrl+g"], "command": "clear_fields", "context":
        [
{ "key": "has_prev_field", "operator": "equal", "operand": true }
        ]
    },
    { "keys": ["ctrl+g"], "command": "hide_panel", "args": {"cancel": true},
        "context":
        [
{ "key": "panel_visible", "operator": "equal", "operand": true }
        ]
    },
    { "keys": ["ctrl+g"], "command": "hide_overlay", "context":
        [
{ "key": "overlay_visible", "operator": "equal", "operand": true }
        ]
    },
    { "keys": ["ctrl+g"], "command": "hide_popup", "context":
        [
{ "key": "popup_visible", "operator": "equal", "operand": true }
        ]
    },
    { "keys": ["ctrl+g"], "command": "hide_auto_complete", "context":
        [
{ "key": "auto_complete_visible", "operator": "equal", "operand": true }
        ]
    },






    // interesting defaults
    // leftalt+shift+# o
    // { "keys": ["ctrl+9"], "command": "focus_group", "args": { "group": 8 } },
    // { "keys": ["ctrl+shift+1"], "command": "move_to_group", "args": { "group": 0 } },

   //{
   //     "keys": ["ctrl+leftalt+t"], "command": "//terminus_open", "args": {
   //         "cmd": "ipython",
   //         "cwd": "${file_path:${folder}}"
   //     }
   // },


// Auto-pair quotes even after string modifiers.
// Copied over from the default bindings with modifications to `preceding_text`
// and an added selector condition.



// { "keys": ["\""], "command": "insert_snippet", "args": {"contents": "f\"$0\""}, "context":
//     [
//         { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
//         { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
//         { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
//         // { "key": "preceding_text", "operator": "regex_contains", "operand": "(?i)\\b[bfru]+$", "match_all": true },
//         { "key": "selector", "operator": "equal", "operand": "source.python" },
//         { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
//     ]
// },
//
//
//
// { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{${1}:${2:7.3f}}"}, "context":
//     [
//         { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
//         { "key": "selection_empty", "operator": "equal", "operand": true, "atch_all": true },
//         { "key": "following_text", "operator": "regex_contains", "operand": "^[^\"]*\"", "match_all": true },
//         { "key": "following_text", "operator": "regex_contains", "operand": "\"[^\"]*$", "match_all": true },
//         { "key": "selector", "operator": "equal", "operand": "source.python" },
//         { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
//     ]
// },


    // { "keys": ["ctrl+'","ctrl+'"], "command": "chain", "args": { "commands": [["fold_all"],["unfold"]] } },
    { "keys": ["ctrl+'","ctrl+'"], "command": "unfold" },
    { "keys": ["ctrl+'","ctrl+`"], "command": "unfold_all" },
    // { "keys": ["leftalt+ctrl+["], "command": "fold" },
    // { "keys": ["leftalt+ctrl+]"], "command": "unfold" },
    { "keys": ["ctrl+'", "ctrl+1"], "command": "fold_by_level", "args": {"level": 1} },
    { "keys": ["ctrl+'", "ctrl+2"], "command": "fold_by_level", "args": {"level": 2} },
    { "keys": ["ctrl+'", "ctrl+3"], "command": "fold_by_level", "args": {"level": 3} },
    { "keys": ["ctrl+'", "ctrl+4"], "command": "fold_by_level", "args": {"level": 4} },
    // { "keys": ["ctrl+space+'", "ctrl+space+1"], "command": "unfold_by_level", "args": {"level": 1} },
    // { "keys": ["ctrl+space+'", "ctrl+space+2"], "command": "unfold_by_level", "args": {"level": 2} },
    // { "keys": ["ctrl+space+'", "ctrl+space+3"], "command": "unfold_by_level", "args": {"level": 3} },
    // { "keys": ["ctrl+space+'", "ctrl+space+4"], "command": "unfold_by_level", "args": {"level": 4} }
    // { "keys": ["ctrl+'", "ctrl+t"], "command": "fold_tag_attributes" }


    { "keys": ["leftalt+="], "command": "goto_definition" },


    { "keys": ["ctrl+leftalt+b"],      "command": "chain", "args": { "commands": [["save"],["build"]] } },

    { "keys": ["ctrl+shift+leftalt+k"], "command": "set_build_system {\"index\": 0}" },
    { "keys": ["ctrl+shift+leftalt+m"], "command": "set_build_system {\"index\": 1}" },
    { "keys": ["ctrl+shift+leftalt+,"], "command": "set_build_system {\"index\": 2}" },
    { "keys": ["ctrl+shift+leftalt+."], "command": "set_build_system {\"index\": 3}" },
    // { "keys": ["leftalt+ctrl+n"], "command": "chain", "args": { "commands": [["save"],["build",{"select":true}]] } },


    { "keys": ["ctrl+leftalt+h"], "command": "multicommand", "args": { "commands": [      {
        "command": "save"
      }, {
        "command": "exec", "args": { "cmd": ["/home/sheffler/rfdsym/ide/whs/change_build_file.py"]}
      }, {
        "command": "set_build_system {\"index\": 2}"
       }
  ]} },

    { "keys": ["leftalt+n"], "command": "move", "args": {"by": "words", "forward": false} },
    { "keys": ["leftalt+o"], "command": "move", "args": {"by": "word_ends", "forward": true} },
    { "keys": ["leftalt+shift+n"], "command": "move", "args": {"by": "words", "forward": false, "extend": true} },
    { "keys": ["leftalt+shift+r"], "command": "move", "args": {"by": "word_ends", "forward": true, "extend": true} },

    { "keys": ["leftalt+ctrl+m"], "command": "" },



]
